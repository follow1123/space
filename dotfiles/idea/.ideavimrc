" ###########################
" #           插件          #
" ###########################

Plug 'machakann/vim-highlightedyank'	" 高亮复制的文本
Plug 'preservim/nerdtree'				" 目录树插件
set which-key                           " which-key插件

" ###########################
" #           变量			#
" ###########################

let g:NERDTreeMapActivateNode = '<Tab>'

let g:highlightedyank_highlight_duration = "100"
" let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

" which-key插件基础配置
let g:WhichKey_FontFamily = "JetBrains Mono"
let g:WhichKey_FontSize = 16
let g:WhichKey_DefaultDelay = 100

" which key 按键前缀
let g:WhichKeyDesc_Git = "<leader>g Git"
let g:WhichKeyDesc_Code = "<leader>c Code"
let g:WhichKeyDesc_Next = "] Next action"
let g:WhichKeyDesc_Previous = "[ Previous action"
let g:WhichKeyDesc_LSP = "<leader>l LSP" " 代码提示相关
let g:WhichKeyDesc_Buffer = "<leader>b Buffer"
let g:WhichKeyDesc_File = "<leader>f File"
let g:WhichKeyDesc_Project = "<leader>p Project"

let mapleader=" "						" leader键
" ###########################
" #        基础配置         #
" ###########################

set clipboard+=unnamed					" 共享系统剪贴板
set scrolloff=4							" 垂直滚动是保持上下有4行间距
set sidescrolloff=8						" 水平滚动时保持左右有8列间距
set hlsearch							" 高亮搜索
set incsearch							" 增量搜索
set ignorecase							" 搜索时忽略大小写
set smartcase							" 搜索时智能匹配大小写
set number								" 设置行号
set relativenumber						" 相对行号
set visualbell							" 关闭蜂鸣器

set notimeout                           " which-key插件显示时间

set ideajoin                            " idea内置合并多行字符串，注释，条件等

" ###########################
" #        按键映射         #
" ###########################

"  ######################################### 基础配置

" 可视行模式
nmap <leader>v V

" 禁用翻页键
nmap <C-f> <nop>
nmap <C-b> <nop>

" 窗口移动
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k

" 搜索上一次的结果
nmap n 'Nn'[v:searchforward]
xmap n 'Nn'[v:searchforward]
omap n 'Nn'[v:searchforward]
nmap N 'nN'[v:searchforward]
xmap N 'nN'[v:searchforward]
omap N 'nN'[v:searchforward]

" 取消搜索时的高亮
nmap <esc> :noh<cr><esc>
" 离开insert模式后切换输入法为英文模式
inoremap <esc> <esc>:!im_select 1<cr>


" 上下移动当前行
nmap <M-j> :m .+1<cr>==
nmap <M-k> :m .-2<cr>==
vmap <M-j> :m '>+1<cr>gv=gv
vmap <M-k> :m '<-2<cr>gv=gv

" visual模式下的tab
vmap < <gv
vmap > >gv

" 翻页时保持光标居中
nmap <C-d> <C-d>zz
nmap <C-u> <C-u>zz

" 搜索时保持光标居中
nmap n nzz
nmap N Nzz

" 退出窗口
nmap <M-q> :q<cr>

"  ######################################### idea功能扩展

" 切换buffer
nmap L <Action>(NextTab)
nmap H <Action>(PreviousTab)

" 移动光标历史位置
nmap <C-i> <Action>(Forward)
nmap <C-o> <Action>(Back)

nmap <M-1> <Action>(ActivateProjectToolWindow)

" 注释
nmap <M-e> <Action>(CommentByLineComment)
vmap <M-e> <Action>(CommentByLineComment)<esc>

let g:WhichKeyDesc_Previous_Function = "[f Previous function"
nmap [f <Action>(MethodUp)

let g:WhichKeyDesc_Next_Function = "]f Next function"
nmap ]f <Action>(MethodDown)

" ######################################### 文件 file
nmap <M-f> <Action>(GotoFile)

let g:WhichKeyDesc_File_Find= "<leader>ff Find File"
nmap <leader>ff <Action>(FindInPath)

" ######################################### git
let g:WhichKeyDesc_Git_ResetLine = "<leader>gr Reset line"
nmap <leader>gr <Action>(Vcs.RollbackChangedLines)
vmap <leader>gr <Action>(Vcs.RollbackChangedLines)

let g:WhichKeyDesc_Git_ResetAll= "<leader>gR Reset all"
nmap <leader>gR <Action>(ChangesView.Revert)

let g:WhichKeyDesc_Git_Diff= "<leader>gd Git Diff"
nmap <leader>gd <Action>(Compare.SameVersion)

let g:WhichKeyDesc_Git_Blame= "<leader>gb Git Blame"
nmap <leader>gb <Action>(Annotate)

let g:WhichKeyDesc_Next_GitChange= "]c Next change"
nmap ]c <Action>(VcsShowNextChangeMarker)

let g:WhichKeyDesc_Previous_GitChange = "[c Previous change"
nmap [c <Action>(VcsShowPrevChangeMarker)

" ######################################### 语言服务相关 lsp
let g:WhichKeyDesc_Next_Error = "]d Next Error"
nmap ]d <Action>(GotoNextError)

nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gr <Action>(FindUsagesInFile)
nmap gR <Action>(FindUsages)
nmap gs <Action>(GotoSuperMethod)


let g:WhichKeyDesc_Next_Usage= "]r Next usage"
nmap ]r <Action>(GotoNextElementUnderCaretUsage)

let g:WhichKeyDesc_Previous_Usage= "[r Previous usage"
nmap [r <Action>(GotoPrevElementUnderCaretUsage)

let g:WhichKeyDesc_LSP_Structure = "<leader>ls List structure"
nmap <leader>ls <Action>(FileStructurePopup)

let g:WhichKeyDesc_Previous_Error = "[d Previous Error"
nmap [d <Action>(GotoPreviousError)

" ######################################### code
let g:WhichKeyDesc_Code_Format = "<leader>cf Code format"
nmap <leader>cf <Action>(ReformatCode)
vmap <leader>cf <Action>(ReformatCode)

let g:WhichKeyDesc_Code_Rename = "<leader>cr Code rename"
nmap <leader>cr <Action>(RenameElement)
nmap <F2> <Action>(RenameElement)

" ######################################### project
let g:WhichKeyDesc_Project_Find = "<leader>pf Find recent Project"
nmap <leader>pf <Action>($LRU)

" ######################################### debug
nmap <M-b> <Action>(ToggleLineBreakpoint)

" ######################################### sethandler
sethandler <C-j> a:vim i:ide
sethandler <C-k> a:vim i:ide